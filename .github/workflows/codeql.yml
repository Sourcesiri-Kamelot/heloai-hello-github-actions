name: "CodeQL Advanced Comprehensive Analysis"

on:
  push:
    branches: [ "main", "develop", "release/*" ]
  pull_request:
    branches: [ "main", "develop" ]
  schedule:
    - cron: '34 8 * * 0'
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare CodeQL Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Create CodeQL Config
        run: |
          mkdir -p .github/codeql/custom-queries
          
          # Create main config
          cat > .github/codeql/config.yml << 'EOL'
          name: "Enhanced CodeQL Config"
          
          paths:
            - 'src'
            - 'lib'
            - 'app'
            - 'core'
            - 'services'
            - 'api'
            
          paths-ignore:
            - '**/test/**'
            - '**/tests/**'
            - '**/spec/**'
            - '**/benchmark/**'
            - '**/node_modules/**'
            - '**/vendor/**'
            - '**/dist/**'
            - '**/build/**'
            - '**/*.test.*'
            - '**/*.spec.*'
            - '**/*.min.js'
            
          queries:
            - uses: security-extended
            - uses: security-and-quality
            - uses: ./.github/codeql/custom-queries/python
            - uses: ./.github/codeql/custom-queries/javascript
            
          query-filters:
            - exclude:
                id: js/redundant-assignment
            - exclude:
                id: py/redundant-assignment
            - exclude:
                tags: maintain
            - include:
                severity: error
            - include:
                severity: warning
                precision: high
          
          database:
            threads: auto
            ram: 8192
          EOL

          # Create custom Python queries
          mkdir -p .github/codeql/custom-queries/python
          cat > .github/codeql/custom-queries/python/custom-security.ql << 'EOL'
          /**
           * @name Custom Python Security Check
           * @description Identifies potential security issues in Python code
           * @kind problem
           * @problem.severity warning
           * @precision high
           * @id py/custom-security
           */
          import python

          from Call call, Value val
          where
            call.getFunc().toString() in ["eval", "exec", "pickle.loads"] and
            not call.getScope() instanceof Test
          select call, "Potentially unsafe function call detected"
          EOL

          # Create custom JavaScript queries
          mkdir -p .github/codeql/custom-queries/javascript
          cat > .github/codeql/custom-queries/javascript/custom-security.ql << 'EOL'
          /**
           * @name Custom JavaScript Security Check
           * @description Identifies potential security issues in JavaScript code
           * @kind problem
           * @problem.severity warning
           * @precision high
           * @id js/custom-security
           */
          import javascript

          from CallExpr call
          where
            call.getCalleeName() in ["eval", "Function", "setTimeout", "setInterval"] and
            exists(call.getArgument(0)) and
            call.getArgument(0).getType().toString() = "string"
          select call, "Potentially dangerous dynamic code execution"
          EOL

  analyze:
    name: Analyze (${{ matrix.language }})
    needs: prepare
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: 360
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: 'python'
            build-mode: 'autodetect'
            python-version: '3.x'
          - language: 'javascript-typescript'
            build-mode: 'autodetect'
            node-version: '18'
          - language: 'java-kotlin'
            build-mode: 'autodetect'
            java-version: '17'
          - language: 'c-cpp'
            build-mode: 'autodetect'
          - language: 'go'
            build-mode: 'autodetect'
            go-version: '1.20'
          - language: 'ruby'
            build-mode: 'autodetect'
            ruby-version: '3.2'
          - language: 'swift'
            build-mode: 'autodetect'
            xcode-version: '14.2'
          - language: 'csharp'
            build-mode: 'autodetect'
            dotnet-version: '7.0'
          - language: 'php'
            build-mode: 'autodetect'
            php-version: '8.2'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2

    - name: Setup Python
      if: matrix.language == 'python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Setup Node.js
      if: matrix.language == 'javascript-typescript'
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Setup Java
      if: matrix.language == 'java-kotlin'
      uses: actions/setup-java@v3
      with:
        java-version: ${{ matrix.java-version }}
        distribution: 'temurin'
        cache: 'gradle'

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        queries: security-extended,security-and-quality
        config-file: ./.github/codeql/config.yml
        ram: 6144
        threads: auto

    - name: Build Python
      if: matrix.language == 'python'
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f setup.py ]; then pip install -e .; fi
        if [ -f pyproject.toml ]; then pip install -e .; fi

    - name: Build JavaScript/TypeScript
      if: matrix.language == 'javascript-typescript'
      run: |
        if [ -f package.json ]; then
          npm ci
          npm audit fix || true
          npm run build --if-present
        fi

    - name: Build Java/Kotlin
      if: matrix.language == 'java-kotlin'
      run: |
        if [ -f pom.xml ]; then
          mvn clean install -DskipTests
        elif [ -f build.gradle ]; then
          ./gradlew build -x test
        fi

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
        upload: true
        output: sarif-results

    - name: Process Analysis Results
      if: always()
      run: |
        if [ -d "sarif-results" ]; then
          echo "Creating detailed analysis report..."
          echo "## CodeQL Security Analysis Report" > analysis-report.md
          echo "### Analysis for ${{ matrix.language }}" >> analysis-report.md
          echo "Completed at: $(date)" >> analysis-report.md
          echo "#### Findings Summary" >> analysis-report.md
          
          if [ -f sarif-results/*.sarif ]; then
            echo "- SARIF results available" >> analysis-report.md
            # Add basic statistics if possible
            ALERTS=$(grep -c "warning" sarif-results/*.sarif || echo "0")
            echo "- Number of potential issues: $ALERTS" >> analysis-report.md
          else
            echo "- No SARIF results found" >> analysis-report.md
          fi

    - name: Upload Analysis Report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: codeql-analysis-${{ matrix.language }}
        path: |
          analysis-report.md
          sarif-results
        retention-days: 30

    - name: Refine Code
      run: |
        echo "Refining code for better quality..."
        # Add your custom script or command here

    - name: Challenge Code
      run: |
        echo "Challenging code to ensure it's the best possible..."
        # Add your custom script or command here

    - name: CLI Commands
      run: |
        echo "Executing CLI commands automatically..."
        # Add your custom script or command here

    - name: Workarounds
      run: |
        echo "Applying workarounds to keep everything we need free..."
        # Add your custom script or command here

  summary:
    name: Comprehensive Analysis Summary
    needs: analyze
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Create Summary
        run: |
          echo "# CodeQL Analysis Summary" > summary.md
          echo "## Overview" >> summary.md
          echo "Analysis completed at: $(date)" >> summary.md
          echo "## Language Status" >> summary.md
          
          declare -A emoji
          emoji["success"]="✅"
          emoji["failure"]="❌"
          emoji["cancelled"]="⚠️"
          emoji["skipped"]="⏭️"
          
          for language in "python" "javascript-typescript" "java-kotlin" "c-cpp" "go" "ruby" "swift" "csharp" "php"; do
            status="${{ needs.analyze.result }}"
            echo "${emoji[$status]} $language: $status" >> summary.md
          done

      - name: Upload Summary
        uses: actions/upload-artifact@v3
        with:
          name: codeql-comprehensive-summary
          path: summary.md
