name: "Advanced CodeQL Security Configuration"

# Extended Paths Configuration
paths-ignore:
  # Standard Exclusions (previous exclusions remain)
  # Language-Specific Exclusions
  - '**/*.pyc'
  - '**/__pycache__/**'
  - '**/.mypy_cache/**'
  - '**/.pytest_cache/**'
  - '**/venv/**'
  - '**/.venv/**'
  - '**/migrations/**'
  - '**/.gradle/**'
  - '**/target/**'
  - '**/*.class'
  - '**/obj/**'
  - '**/bin/**'
  - '**/*.o'
  - '**/*.a'
  - '**/*.so'
  - '**/*.dll'
  - '**/*.exe'
  - '**/composer.lock'
  - '**/Gemfile.lock'
  - '**/poetry.lock'
  - '**/cargo.lock'

paths:
  # Previous paths remain
  - 'packages'
  - 'modules'
  - 'internal'
  - 'shared'
  - 'common'
  - 'framework'

# Enhanced Query Configuration
queries:
  # Official Suites
  - name: "Security and Quality"
    uses: security-and-quality
  - name: "Security Extended"
    uses: security-extended
  
  # Custom Security Query Templates
  - name: "Custom Authentication Checks"
    uses: ./.github/codeql/custom-queries/auth-checks.ql
  - name: "Custom Input Validation"
    uses: ./.github/codeql/custom-queries/input-validation.ql
  - name: "Custom Secure Configuration"
    uses: ./.github/codeql/custom-queries/secure-config.ql

# Extended Query Packs
packs:
  # Language Packs
  - codeql/java-queries
  - codeql/python-queries
  - codeql/javascript-queries
  - codeql/cpp-queries
  - codeql/go-queries
  - codeql/ruby-queries
  - codeql/csharp-queries
  - codeql/kotlin-queries
  - codeql/swift-queries
  
  # Security Packs
  - codeql/security-extended
  - codeql/security-experimental
  - codeql/suite-helpers
  - codeql/quality-extensions
  - codeql/regex-security
  - codeql/cryptography
  - codeql/network-security

# Advanced Language Configuration
extraction:
  # Python Configuration
  python:
    python-version: 3
    index-import-modules: true
    dependencies:
      - pandas
      - numpy
      - tensorflow
      - torch
    memory: 4096
    timeout: 1800
    index-generated-files: false

  # JavaScript/TypeScript
  javascript:
    index-typescript: true
    typescript-tracing: true
    maxFileSize: 10mb
    dependencies:
      - react
      - vue
      - angular
    memory: 4096
    timeout: 1800

  # Java/Kotlin
  java:
    version: 17
    index-reflective-calls: true
    index-generated-files: false
    dependencies:
      - org.springframework
      - io.micronaut
      - io.quarkus
    memory: 6144
    timeout: 2400

  # Go Configuration
  go:
    index-generate-files: false
    dependencies:
      - github.com/gin-gonic/gin
      - github.com/gorilla/mux
    memory: 4096
    timeout: 1800

  # C/C++ Configuration
  cpp:
    index-header-files: true
    index-generated-files: false
    memory: 8192
    timeout: 3600

# Enhanced Database Configuration
database:
  max-disk: 20GB
  threads: auto
  ram: 16GB
  max-connections: 100
  timeout: 7200

# Performance Optimization
performance:
  max-memory-boost: true
  parallel-processing: true
  incremental-analysis: true
  cache:
    enabled: true
    max-size: 10GB
    retention-days: 7
  optimizations:
    - "reduce-path-ambiguity"
    - "optimize-constraint-solving"
    - "minimize-database-size"

# Analysis Tuning
analysis:
  filter-duplicates: true
  max-paths: 10000
  timeout-minutes: 360
  memory-limit: 16GB
  experimental-features: true
  depth-limit: 5
  path-length-limit: 100
  callgraph:
    max-depth: 10
    include-frameworks: true
  dataflow:
    timeout: 1800
    max-states: 100000

# Custom Query Templates
query-templates:
  # Authentication Query Template
  - name: "Authentication Bypass Check"
    pattern: |
      /**
       * @name Authentication Bypass Detection
       * @description Identifies potential authentication bypass vulnerabilities
       * @kind path-problem
       * @severity error
       */
      import security.Authentication
      
      from AuthenticationCheck check, DataFlow::PathNode source, DataFlow::PathNode sink
      where exists(AuthenticationBypass bypass |
        bypass.hasSource(source) and
        bypass.hasSink(sink))
      select check, source, sink, "Potential authentication bypass detected"

  # Input Validation Template
  - name: "Input Validation Check"
    pattern: |
      /**
       * @name Unsafe Input Validation
       * @description Detects insufficient input validation
       * @kind problem
       * @severity warning
       */
      import InputValidation
      
      from UserInput input, ValidationCheck check
      where not exists(Validation v | v.validates(input))
      select input, "Input not properly validated"

# Output Configuration
output:
  sarif:
    category-level-counts: true
    issue-tracker-integration: true
    max-results: 2000
    group-rules: true
    detailed-metrics: true
    include-snippets: true
  reports:
    enable-html: true
    enable-csv: true
    enable-json: true
    include-metrics: true

    # Additional Enhanced Configurations
framework-analysis:
 # Spring Framework
 spring:
   scan-controllers: true
   scan-services: true
   scan-repositories: true
   security-checks:
     - csrf-protection
     - secure-headers
     - authentication-checks
     
 # React
 react:
   scan-components: true
   scan-hooks: true
   security-checks:
     - xss-prevention
     - prop-validation
     - state-management

 # Django
 django:
   scan-views: true
   scan-models: true
   security-checks:
     - sql-injection
     - xss-prevention
     - csrf-validation

# Advanced Security Patterns
security-patterns:
 authentication:
   patterns:
     - pattern: "user.*password"
       severity: high
     - pattern: "auth.*token"
       severity: high
     - pattern: "api.*key"
       severity: high

 encryption:
   required-algorithms:
     - AES-256
     - RSA-2048
   forbidden-algorithms:
     - MD5
     - SHA1
     - DES

 api-security:
   check-patterns:
     - rate-limiting
     - input-validation
     - output-encoding

# Machine Learning Security
ml-security:
 model-analysis:
   check-points:
     - model-loading
     - inference
     - training
   vulnerabilities:
     - model-poisoning
     - data-leakage
     - adversarial-attacks

# Cloud Security
cloud-security:
 aws:
   scan-patterns:
     - iam-policies
     - s3-buckets
     - lambda-functions
 azure:
   scan-patterns:
     - role-assignments
     - storage-accounts
     - functions
 gcp:
   scan-patterns:
     - service-accounts
     - cloud-storage
     - cloud-functions

# Container Security
container-security:
 docker:
   scan-patterns:
     - privileged-containers
     - root-users
     - exposed-ports
 kubernetes:
   scan-patterns:
     - pod-security
     - network-policies
     - rbac-configurations

# Database Security
database-security:
 patterns:
   - sql-injection
   - nosql-injection
   - connection-leaks
 frameworks:
   - sequelize
   - mongoose
   - sqlalchemy
   - hibernate

# Advanced Performance Optimization
advanced-performance:
 memory-management:
   gc-optimization: true
   heap-size: 8GB
   stack-size: 2MB
 threading:
   max-threads: 16
   thread-pool-size: 8
 caching:
   query-cache: true
   result-cache: true
   cache-size: 2GB

# Custom Security Rules
custom-security-rules:
 - name: "API Key Exposure"
   pattern: |
     /**
      * @name API Key Exposure Check
      * @description Detects exposed API keys in code
      * @kind problem
      * @severity critical
      */
     import ApiSecurity
     
     from ApiKeyExposure key
     where key.isExposed()
     select key, "API key potentially exposed"

 - name: "Insecure Deserialization"
   pattern: |
     /**
      * @name Insecure Deserialization Check
      * @description Detects unsafe deserialization patterns
      * @kind path-problem
      * @severity high
      */
     import Serialization
     
     from DeserializationCall call
     where call.isUnsafe()
     select call, "Potentially unsafe deserialization detected"

# Advanced Monitoring
monitoring:
 metrics:
   collect:
     - analysis-duration
     - memory-usage
     - cpu-usage
     - query-performance
 alerts:
   thresholds:
     memory: 90%
     cpu: 80%
     duration: 4h
 reporting:
   format:
     - json
     - html
     - pdf
   destination:
     - email
     - slack
     - teams

# AI/ML Model Security
ai-security:
 model-validation:
   check-points:
     - input-validation
     - output-sanitization
     - model-integrity
 data-security:
   patterns:
     - pii-detection
     - data-anonymization
     - secure-transfer
 deployment:
   checks:
     - model-versioning
     - access-control
     - monitoring

# License Compliance
license-compliance:
 check-licenses:
   - MIT
   - Apache-2.0
   - GPL-3.0
 forbidden-licenses:
   - AGPL
 dependencies:
   scan-depth: full
   include-transitive: true
