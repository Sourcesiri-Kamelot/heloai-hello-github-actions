from dataclasses import dataclass
from datetime import datetime, timedelta
from enum import Enum
from typing import Dict, List, Optional
import uuid
import math

class AccountCategory(Enum):
    SOCIAL = "social"
    FINANCIAL = "financial"
    ECOMMERCE = "ecommerce"
    GAMING = "gaming"
    AI_TOOLS = "ai_tools"
    MISCELLANEOUS = "miscellaneous"

class SubscriptionType(Enum):
    FREE = "free"
    TRIAL = "trial"
    PAID = "paid"

@dataclass
class AccountCredentials:
    username: str
    password_hash: str  # Store only hashed passwords
    has_2fa: bool = False

@dataclass
class SubscriptionDetails:
    type: SubscriptionType
    billing_amount: float = 0.0
    billing_frequency: timedelta = timedelta(days=30)
    payment_method: Optional[str] = None
    trial_end_date: Optional[datetime] = None

class QuantumStateTracker:
    """Inspired by quantum mechanics to track account state and activity."""
    
    def __init__(self):
        self.entanglement_factor = 0.0
        self.last_interaction = datetime.now()
        self.coherence_threshold = 0.7
        
    def update_state(self, interaction_strength: float = 1.0):
        """Update quantum state based on interaction."""
        time_delta = (datetime.now() - self.last_interaction).total_seconds()
        decay_factor = math.exp(-time_delta / (30 * 24 * 3600))  # 30-day coherence time
        self.entanglement_factor = min(1.0, self.entanglement_factor * decay_factor + interaction_strength)
        self.last_interaction = datetime.now()
        
    def needs_attention(self) -> bool:
        """Check if account needs attention based on quantum coherence."""
        return self.entanglement_factor < self.coherence_threshold

class Account:
    def __init__(
        self,
        name: str,
        category: AccountCategory,
        credentials: AccountCredentials,
        subscription: Optional[SubscriptionDetails] = None
    ):
        self.id = str(uuid.uuid4())
        self.name = name
        self.category = category
        self.credentials = credentials
        self.subscription = subscription or SubscriptionDetails(SubscriptionType.FREE)
        self.created_at = datetime.now()
        self.last_accessed = datetime.now()
        self.quantum_state = QuantumStateTracker()
        
    def access(self):
        """Record account access and update quantum state."""
        self.last_accessed = datetime.now()
        self.quantum_state.update_state()
        
    def needs_attention(self) -> bool:
        """Check if account needs attention based on quantum state."""
        return self.quantum_state.needs_attention()

class AccountTracker:
    def __init__(self):
        self.accounts: Dict[str, Account] = {}
        
    def add_account(self, account: Account) -> str:
        """Add a new account to the tracker."""
        self.accounts[account.id] = account
        return account.id
        
    def get_account(self, account_id: str) -> Optional[Account]:
        """Retrieve an account by ID."""
        return self.accounts.get(account_id)
        
    def get_accounts_by_category(self, category: AccountCategory) -> List[Account]:
        """Get all accounts in a specific category."""
        return [acc for acc in self.accounts.values() if acc.category == category]
        
    def get_accounts_needing_attention(self) -> List[Account]:
        """Get accounts that need attention based on quantum state."""
        return [acc for acc in self.accounts.values() if acc.needs_attention()]
        
    def get_trial_accounts_expiring_soon(self, days_threshold: int = 7) -> List[Account]:
        """Get trial accounts expiring within the specified number of days."""
        threshold_date = datetime.now() + timedelta(days=days_threshold)
        return [
            acc for acc in self.accounts.values()
            if (acc.subscription.type == SubscriptionType.TRIAL and
                acc.subscription.trial_end_date and
                acc.subscription.trial_end_date <= threshold_date)
        ]

# Example usage
def create_example_account() -> Account:
    """Create an example account for demonstration."""
    credentials = AccountCredentials(
        username="user@example.com",
        password_hash="hashed_password_here",
        has_2fa=True
    )
    
    subscription = SubscriptionDetails(
        type=SubscriptionType.TRIAL,
        billing_amount=9.99,
        trial_end_date=datetime.now() + timedelta(days=14)
    )
    
    return Account(
        name="Example AI Tool",
        category=AccountCategory.AI_TOOLS,
        credentials=credentials,
        subscription=subscription
    )

# Initialize the tracker
tracker = AccountTracker()

# Add an example account
example_account = create_example_account()
account_id = tracker.add_account(example_account)

# Demonstrate quantum-inspired state tracking
example_account.access()  # Record an access
needs_attention = example_account.needs_attention()
print(f"Account needs attention: {needs_attention}")
